<?php

/**
 * @file
 * Contains pbc_automation.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Mail\MailFormatHelper;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Component\Utility\Html;
use Drupal\Core\Datetime\DrupalDateTime;

/**
 * Implements hook_help().
 */
function pbc_automation_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the pbc_automation module.
    case 'help.page.pbc_automation':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Handles various tasks that need to happen nightly and throughout the week. Mostly a hook_cron implementation.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_cron().
 */
function pbc_automation_cron() {
  $utility = Drupal::service('pbc_groups.utility');
  $task = Drupal::service('pbc_automation.pco_tasks');
  $storage = Drupal::getContainer()->get('entity_type.manager')->getStorage('node');

  $now = new DrupalDateTime('now');
  $nowDate = $now->format('Y-m-d');
  $nowTime = $now->format('U');

  // TODO: move some of this to a class.
  // Get the start date for the current week.
  // http://stackoverflow.com/a/17438928
  $start = new DrupalDateTime('last saturday + 1 day');
  $startDate = $start->format('Y-m-d');

  // Get the end date for the current week.
  $end = new DrupalDateTime('last saturday + 7 days');
  $endDate = $end->format('Y-m-d');

  // Load all the published groups.
  $groups = $storage->loadByProperties([
    'type' => 'group',
    'status' => 1,
  ]);

  foreach ($groups as $group) {
    // See if a record already exists for the week.
    $attendance = $storage->getQuery()->count()
      ->condition('type', 'group_attendance_record')
      ->condition('status', 1)
      ->condition('field_group', $group->id())
      ->condition('field_meeting_date', [$startDate, $endDate], 'BETWEEN')
      ->execute();

    // 1. Attendance not created for the current week.
    // 2. It is after 8PM of day of the meeting.
    $day = $group->field_meeting_day->getString();
    $days = [
      'Sunday' => 'last saturday 8pm + 1 day',
      'Monday' => 'last saturday 8pm + 2 days',
      'Tuesday' => 'last saturday 8pm + 3 days',
      'Wednesday' => 'last saturday 8pm + 4 days',
      'Thursday' => 'last saturday 8pm + 5 days',
      'Friday' => 'last saturday 8pm + 6 days',
      'Saturday' => 'last saturday 8pm + 7 days',
    ];
    $dayDate = new DrupalDateTime($days[$day]);
    $meetingTime = $dayDate->format('U');
    if ($attendance == 0 && $nowTime > $meetingTime) {
      $groupAttendValues = [
        'type' => 'group_attendance_record',
        'field_group' => $group->id(),
        'field_meeting_date' => $nowDate,
      ];

      // Create group_attendance_record node.
      if ($attendance = $utility->createNode($groupAttendValues)) {
        // Send attendance manager an email.
        $mail = Drupal::service('plugin.manager.mail');
        $user = $attendance->field_group->entity->field_attendance_manager->entity;
        $mail->mail(
          'pbc_automation',
          'send_attendance_link',
          $user->getEmail(),
          $user->getPreferredLangcode(),
          [
            'user' => $user,
            'group_attendance_record' => $attendance,
          ]
        );
      }
    }
  }

  // Sync data from Planning Center Online.
  Drupal::state()->set('pbc_automation_next', 1);
  Drupal::state()->set('pbc_automation_offset', 0);

  do {
    $offset = Drupal::state()->get('pbc_automation_offset');

    if ($results = $task->getPcoUpdatedPeople($offset, 100)) {
      if (isset($results->meta->next)) {
        print_r($results->meta->next);
        Drupal::state()->set('pbc_automation_next', 1);
      }
      else {
        Drupal::state()->set('pbc_automation_next', 0);
      }

      if (isset($results->meta->next->offset)) {
        Drupal::state()->set('pbc_automation_offset', $results->meta->next->offset);
      }

      foreach ($results->data as $result) {
        $task->createOrUpdateNode($result);
      }
      // Set a last updated date.
      Drupal::state()->set('pbc_automation_sync', $nowDate);
    }
    else {
      // No results returned.
      Drupal::state()->set('pbc_automation_next', 0);
    }
  } while (Drupal::state()->get('pbc_automation_next'));
}

/**
 * Implements hook_mail().
 */
function pbc_automation_mail($key, &$message, $params) {
  $function = sprintf('pbc_automation_%s', $key);
  if (function_exists($function)) {
    $function($message, $params);
  }
}

/**
 * Send email to the attendance manager for a group.
 *
 * Called from pbc_automation_cron.
 */
function pbc_automation_send_attendance_link(&$message, $params) {
  $user = $params['user'];
  $attendance = $params['group_attendance_record'];
  $options = [
    'absolute' => TRUE,
    'query' => [
      'destination' => 'node/' . $attendance->id(),
    ],
  ];
  $url = Url::fromRoute(
    'user.login',
    [],
    $options
  );
  $link = Link::fromTextAndUrl($url->toString(), $url)->toString();
  $body = [
    '<p>' . t('Hi @name!,', ['@name' => $user->field_first_name->getString()]) . '</p>',
    '<p>This is your friendly CG robot reminding you to record your attendance this week!</p>',
    '<p><strong>' . t('Link:') . '</strong> ' . $link . '</p>',
    '<p>Questions? Please email <a href="mailto:cghelp@providencedenver.org">cghelp@providencedenver.org</a></p>',
    '<p>' . t('Sincerely,') . '</p>',
    '<p>' . t('The CG Attendance Robot') . '</p>'
  ];

  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
  $message['subject'] = $attendance->getTitle();
  $message['body'] = $body;

}
