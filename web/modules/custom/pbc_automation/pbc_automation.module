<?php

/**
 * @file
 * Contains pbc_automation.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Mail\MailFormatHelper;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Component\Utility\Html;
use Drupal\Core\Datetime\DrupalDateTime;

/**
 * Implements hook_help().
 */
function pbc_automation_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the pbc_automation module.
    case 'help.page.pbc_automation':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Handles various tasks that need to happen nightly and throughout the week. Mostly a hook_cron implementation.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_cron().
 */
function pbc_automation_cron() {
  $utility = Drupal::service('pbc_groups.utility');
  $storage = Drupal::getContainer()->get('entity_type.manager')->getStorage('node');

  // Get the start date for the week (Sunday).
  $start = new DrupalDateTime();
  // If the given date is Sunday, use it as the start date.
  if ($start->format('w') == 0) {
    $startDate = $start->format('Y-m-d');
  }
  else {
    $start->modify('last sunday');
    $startDate = $start->format('Y-m-d');
  }

  // Get the end date for the week (Saturday).
  $end = new DrupalDateTime();
  // If the given date is Saturday, use it as the end date.
  if ($end->format('w') == 6) {
    $endDate = $end->format('Y-m-d');
  }
  else {
    $end->modify('next saturday');
    $endDate = $end->format('Y-m-d');
  }

  // Load all the published & active groups.
  $groups = $storage->loadByProperties([
    'type' => 'group',
    'status' => 1,
    'field_group_status' => 'Active',
  ]);

  foreach ($groups as $group) {
    // See if a record already exists for the week.
    $attendance = $storage->getQuery()->count()
      ->condition('type', 'group_attendance_record')
      ->condition('status', 1)
      ->condition('field_group', $group->id())
      ->condition('field_meeting_date', [$startDate, $endDate], 'BETWEEN')
      ->accessCheck(FALSE)
      ->execute();

    // 1. Attendance not created for the current week.
    // 2. It is after the set day and time of the meeting.
    $day = $group->field_meeting_day->getString();
    $days = [
      'Sunday' => '12:00',
      'Monday' => '20:00',
      'Tuesday' => '20:00',
      'Wednesday' => '20:00',
      'Thursday' => '20:00',
      'Friday' => '20:00',
      'Saturday' => '20:00',
    ];

    // Create a DrupalDateTime object with the specific timestamp.
    $now = new DrupalDateTime();
    $nowDate = $now->format('Y-m-d');
    $nowDay = $now->format('l');
    $nowTime = $now->format('H:i');

    if ($attendance == 0
      && $nowDay == $day
      && $nowTime >= $days[$day]) {
      $groupAttendValues = [
        'type' => 'group_attendance_record',
        'field_group' => $group->id(),
        'field_meeting_date' => $nowDate,
      ];

      // Create group_attendance_record node.
      if ($attendance = $utility->createNode($groupAttendValues)) {
        // Send attendance manager an email.
        $mail = Drupal::service('plugin.manager.mail');
        $user = $attendance->field_group->entity->field_attendance_manager->entity;
        $emails = [$user->getEmail()];
        // Notify additional folks if need be.
        if ($user->hasField('field_also_notify') && !$user->field_also_notify->isEmpty()) {
          $additional_emails = array_column($user->get('field_also_notify')->getValue(), 'value');
          $emails = array_merge($emails, $additional_emails);
        }

        $mail->mail(
          'pbc_automation',
          'send_attendance_link',
          implode(',', $emails),
          $user->getPreferredLangcode(),
          [
            'user' => $user,
            'group_attendance_record' => $attendance,
          ]
        );
      }
    }
  }
}

/**
 * Implements hook_mail().
 */
function pbc_automation_mail($key, &$message, $params) {
  $function = sprintf('pbc_automation_%s', $key);
  if (function_exists($function)) {
    $function($message, $params);
  }
}

/**
 * Send email to the attendance manager for a group.
 *
 * Called from pbc_automation_cron.
 */
function pbc_automation_send_attendance_link(&$message, $params) {
  $user = $params['user'];
  $attendance = $params['group_attendance_record'];
  $options = [
    'absolute' => TRUE,
    'query' => [
      'destination' => 'node/' . $attendance->id(),
    ],
  ];
  $url = Url::fromRoute(
    'user.login',
    [],
    $options
  );
  $link = Link::fromTextAndUrl($url->toString(), $url)->toString();
  $body = [
    '<p>' . t('Hi @name!,', ['@name' => $user->field_first_name->getString()]) . '</p>',
    '<p>This is your friendly CG robot reminding you to record your attendance this week!</p>',
    '<p><strong>' . t('Link:') . '</strong> ' . $link . '</p>',
    '<p>Questions? Please email <a href="mailto:cghelp@providencedenver.org">cghelp@providencedenver.org</a></p>',
    '<p>' . t('Sincerely,') . '</p>',
    '<p>' . t('The CG Attendance Robot') . '</p>'
  ];

  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
  $message['subject'] = $attendance->getTitle();
  $message['body'] = $body;
}
