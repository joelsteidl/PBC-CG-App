<?php

/**
 * @file
 * Contains cremat_student.module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_view().
 */
function pbc_groups_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() === 'group_attendance_record' && $view_mode === 'full') {
    $form_builder = Drupal::service('form_builder');
    $build['management_form']['#weight'] = 20;
    $build['management_form']['form'] = $form_builder->getForm('Drupal\pbc_groups\Form\ManageAttendanceForm');
    return $build;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function pbc_groups_node_presave(EntityInterface $entity) {
  $title = NULL;

  // Decide what to populate the title field with.
  switch ($entity->getType()) {
    case 'group_attendance_record':
      $title = $entity->field_group->entity->getTitle() . ' attendance for ' . $entity->field_meeting_date->value;
      break;

    case 'individual_attendance_record':
      $title = 'Attendance for ' . $entity->field_group_connection->entity->getTitle() . ' for ' . $entity->field_group_attendance_record->entity->field_meeting_date->value;
      break;

    case 'group_connection':
      $title = $entity->field_individual->entity->getTitle() . ' in ' . $entity->field_group->entity->getTitle();
      break;

    case 'individual':
      $title = $entity->field_first_name->getString() . ' ' . $entity->field_last_name->getString();
      break;
  }

  if (!$title) {
    return FALSE;
  }
  // Limit to 255 characters.
  $title = substr($title, 0, 255);
  // Set a value for the title field.
  $entity->title->setValue($title);

  // Add them to Planning Center.
  if ($entity->getType() === 'individual' && $entity->isNew() && $entity->field_planning_center_id->isEmpty()) {
    $task = Drupal::service('pbc_automation.pco_tasks');
    if ($pco_id = $task->createPcoPerson($entity)) {
      $entity->field_planning_center_id->setValue($pco_id);
    }
  }

  // Prevent Group Connection Dups.
  // TODO: Move to method
  if ($entity->getType() === 'group_connection' && $entity->isNew()) {
    $storage = Drupal::getContainer()->get('entity_type.manager')->getStorage('node');
    $connections = $storage->getQuery()
      ->condition('type', 'group_connection')
      ->condition('status', 1)
      ->condition('field_group', $entity->field_group->target_id)
      ->condition('field_individual', $entity->field_individual->target_id)
      ->execute();

    if (count($connections)) {
      throw new \Exception(t('You are trying to add a duplicate person to your group.'));
      return FALSE;
    }
  }
  elseif ($entity->getType() === 'individual_attendance_record' && $entity->isNew()) {
    $storage = Drupal::getContainer()->get('entity_type.manager')->getStorage('node');
    $connections = $storage->getQuery()
      ->condition('type', 'individual_attendance_record')
      ->condition('status', 1)
      ->condition('field_group_connection', $entity->field_group_connection->target_id)
      ->condition('field_group_attendance_record', $entity->field_group_attendance_record->target_id)
      ->execute();

    if (count($connections)) {
      throw new \Exception(t('You are trying to add a duplicate person to this weeks attendance.'));
      return FALSE;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function pbc_groups_node_insert(EntityInterface $entity) {

  if ($entity->getType() != 'group_attendance_record') {
    return FALSE;
  }

  $utility = Drupal::service('pbc_groups.utility');
  // Create Individual Attendance Records.
  $storage = Drupal::getContainer()->get('entity_type.manager')->getStorage('node');
  $connections = $storage->getQuery()
    ->condition('type', 'group_connection')
    ->condition('field_group_connection_status', 1)
    ->condition('status', 1)
    ->condition('field_group', $entity->field_group->target_id)
    ->execute();

  foreach ($connections as $connection) {
    $connectionNode = $storage->load($connection);
    $individual = $connectionNode->field_individual->entity;
    $indAttendanceValues = [
      'type' => 'individual_attendance_record',
      'field_group_attendance_record' => $entity->id(),
      'field_in_attendance' => 0,
      'field_group_connection' => $connection,
      'field_group_connection_status' => $connectionNode->field_group_connection_status->target_id,
      'field_neighborhood' => $individual->field_neighborhood->target_id,
      'field_membership' => $individual->field_membership->target_id,
      'field_below_poverty_line' => $individual->field_below_poverty_line->value,
    ];

    // Create individual_attendance_record node.
    $utility->createNode($indAttendanceValues);
  }
}

/**
 * Implements hook_views_pre_view().
 */
function pbc_groups_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() === 'group_guests') {
    if (!$node = Drupal::routeMatch()->getParameter('node')) {
      return FALSE;
    }
    // Pass in group id.
    $args[] = $node->field_group->target_id;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pbc_groups_form_node_individual_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $url = 'https://people.planningcenteronline.com/people';
  if (isset($form['field_planning_center_id']['widget'][0]['value']['#default_value'])) {
    $pcoId = $form['field_planning_center_id']['widget'][0]['value']['#default_value'];
    $url = 'https://people.planningcenteronline.com/people/AC' . $pcoId;
  }

  drupal_set_message(t('Please do not edit individuals here. Please edit their information on <a href="@url" target="_blank">Planning Center</a>.', ['@url' => $url]), 'warning', FALSE);
  $form['field_planning_center_id']['#disabled'] = TRUE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pbc_groups_form_node_group_connection_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  drupal_set_message(t('You may edit the status for this person.'), 'warning', FALSE);
  $form['field_group']['#disabled'] = TRUE;
  $form['field_individual']['#disabled'] = TRUE;
}

/**
 * Implements hook_node_access().
 *
 * Handle who can view various content types
 * Drupal does not do this per content type
 * See c4l_class.module for the class content type access.
 * See c4l_student.module for the student content type access.
 */
// function c4l_profiles_node_access(Node $node, $operation, AccountProxy $account) {
//   // Allow specific paths for anyone.
//   $allowed = [
//     '/credits',
//   ];
//   if (Role::hasRole($account, 'anonymous') && $operation === 'view') {
//     if (in_array($node->url(), $allowed)) {
//       return AccessResult::allowed();
//     }
//     return AccessResult::forbidden();
//   }
//
//   $type = $node->getType();
//   // Class and Student content types are handled in other modules.
//   $types = [
//     'article' => ['school_admin', 'staff', 'teacher'],
//     'page' => ['parent_guardian', 'school_admin', 'staff', 'teacher'],
//     'black_line_master' => ['staff', 'teacher'],
//     'handbook_page' => ['school_admin', 'staff', 'teacher'],
//     'learning_center' => ['school_admin', 'staff', 'teacher'],
//     'learning_center_activity' => ['school_admin', 'staff', 'teacher'],
//     'learning_objective' => ['school_admin', 'staff', 'teacher'],
//     'lesson' => ['school_admin', 'staff', 'teacher'],
//     'ongoing_assessment' => ['school_admin', 'staff', 'teacher'],
//     'site_documentation' => ['staff'],
//     'welcome_song' => ['staff', 'teacher'],
//   ];
//
//   if (isset($types[$type]) && $operation === 'view') {
//     // Always add administrator role.
//     $types[$type][] = 'administrator';
//     if (Role::hasAnyRole($account, $types[$type])) {
//       return AccessResult::allowed();
//     }
//     return AccessResult::forbidden();
//   }
// }
