<?php

/**
 * @file
 * Contains cremat_student.module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountProxy;
use Drupal\node\NodeInterface;

/**
 * Implements hook_entity_view().
 */
function pbc_groups_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() === 'group_attendance_record' && $view_mode === 'full') {
    $build['heading'] = [
      '#prefix' => '<h2>',
      '#markup' => t('2. Who attended this week?'),
      '#suffix' => '</h2>',
    ];
    $form_builder = Drupal::service('form_builder');
    $build['management_form']['#weight'] = 20;
    $build['management_form']['form'] = $form_builder->getForm('Drupal\pbc_groups\Form\ManageAttendanceForm');
    $build['management_form']['form']['#cache']['max-age'] = 0;
    return $build;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function pbc_groups_node_presave(EntityInterface $entity) {

  $date = Drupal::service('date.formatter');
  $title = NULL;

  // Decide what to populate the title field with.
  switch ($entity->getType()) {
    case 'group_attendance_record':
      $timestamp = new DrupalDateTime($entity->field_meeting_date->value);
      $timestamp = $timestamp->format('U');
      $title = $entity->field_group->entity->getTitle() . ' attendance for ' . $date->format($timestamp, 'short');
      break;

    case 'individual_attendance_record':
      $timestamp = new DrupalDateTime($entity->field_group_attendance_record->entity->field_meeting_date->value);
      $timestamp = $timestamp->format('U');
      $title = 'Attendance for ' . $entity->field_group_connection->entity->getTitle() . ' for ' . $date->format($timestamp, 'short');
      break;

    case 'group_connection':
      $title = $entity->field_individual->entity->getTitle() . ' in ' . $entity->field_group->entity->getTitle();
      break;

    case 'individual':
      $title = $entity->field_first_name->getString() . ' ' . $entity->field_last_name->getString();
      break;
  }

  if (!$title) {
    return FALSE;
  }
  // Limit to 255 characters.
  $title = substr($title, 0, 255);
  // Set a value for the title field.
  $entity->title->setValue($title);

  // Add them to Planning Center.
  if ($entity->getType() === 'individual' && $entity->isNew() && $entity->field_planning_center_id->isEmpty()) {
    $task = Drupal::service('pbc_automation.pco_tasks');
    if ($pco_id = $task->createPcoPerson($entity)) {
      $entity->field_planning_center_id->setValue($pco_id);
    }
  }

  // Prevent Group Connection Dups.
  // TODO: Move to method
  if ($entity->getType() === 'group_connection' && $entity->isNew()) {
    $storage = Drupal::getContainer()->get('entity_type.manager')->getStorage('node');
    $connections = $storage->getQuery()
      ->condition('type', 'group_connection')
      ->condition('status', 1)
      ->condition('field_group', $entity->field_group->target_id)
      ->condition('field_individual', $entity->field_individual->target_id)
      ->accessCheck(FALSE)
      ->execute();

    if (count($connections)) {
      throw new \Exception(t('You are trying to add a duplicate person to your group.'));
      return FALSE;
    }
  }
  elseif ($entity->getType() === 'individual_attendance_record' && $entity->isNew()) {
    $storage = Drupal::getContainer()->get('entity_type.manager')->getStorage('node');
    $connections = $storage->getQuery()
      ->condition('type', 'individual_attendance_record')
      ->condition('status', 1)
      ->condition('field_group_connection', $entity->field_group_connection->target_id)
      ->condition('field_group_attendance_record', $entity->field_group_attendance_record->target_id)
      ->accessCheck(FALSE)
      ->execute();

    if (count($connections)) {
      throw new \Exception(t('You are trying to add a duplicate person to this weeks attendance.'));
      return FALSE;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function pbc_groups_node_insert(EntityInterface $entity) {

  if ($entity->getType() != 'group_attendance_record') {
    return FALSE;
  }

  $utility = Drupal::service('pbc_groups.utility');
  // Create Individual Attendance Records.
  $storage = Drupal::getContainer()->get('entity_type.manager')->getStorage('node');
  $connections = $storage->getQuery()
    ->condition('type', 'group_connection')
    ->condition('field_group_connection_status', 1)
    ->condition('status', 1)
    ->condition('field_group', $entity->field_group->target_id)
    ->accessCheck(FALSE)
    ->execute();

  foreach ($connections as $connection) {
    $group_connection = $storage->load($connection);
    $group_attendance_record = $entity;
    if ($indAttendanceValues = $utility->buildIndivdualAttendanceNodeValues($group_connection, $group_attendance_record, 0)) {
      // Create individual_attendance_record node.
      $utility->createNode($indAttendanceValues);
    }
  }
}

/**
 * Implements hook_views_pre_view().
 */
function pbc_groups_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() === 'group_guests') {
    if (!$node = Drupal::routeMatch()->getParameter('node')) {
      return FALSE;
    }
    // Pass in group id.
    $args = [$node->field_group->target_id, $node->id()];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pbc_groups_form_node_individual_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $url = 'https://people.planningcenteronline.com/people';
  if (isset($form['field_planning_center_id']['widget'][0]['value']['#default_value'])) {
    $pcoId = $form['field_planning_center_id']['widget'][0]['value']['#default_value'];
    $url = 'https://people.planningcenteronline.com/people/AC' . $pcoId;
  }

  \Drupal::messenger()->addWarning(t('Please do not edit individuals here. Please edit their information on <a href="@url" target="_blank">Planning Center</a>.', ['@url' => $url]));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pbc_groups_form_node_group_connection_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  \Drupal::messenger()->addWarning(t('You may edit the status for this person.'));
  $form['field_group']['#disabled'] = TRUE;
  $form['field_individual']['#disabled'] = TRUE;
  $form['revision_information']['#access'] = FALSE;
}

/**
 * Implements hook_node_access().
 *
 * Handle who can view various content types
 * Drupal does not do this per content type
 */
function pbc_groups_node_access(NodeInterface $node, $op, AccountProxy $account) {
  $roles = $account->getRoles();
  $type = $node->getType();
  $types = [
    'group',
    'group_attendance_record',
    'group_connection',
  ];
  if (in_array('attendance_manager', $roles) && in_array($type, $types)) {
    switch ($type) {
      case 'group':
        if ($op === 'view' && $account->id() === $node->field_attendance_manager->target_id) {
          return AccessResult::allowed()->cachePerUser();
        }
        break;

      case 'group_attendance_record':
        if ($op === 'view' && $account->id() === $node->field_group->entity->field_attendance_manager->target_id) {
          return AccessResult::allowed()->cachePerUser();
        }
        break;

      case 'group_connection':
        if (($op === 'view' || $op === 'update') && $account->id() === $node->field_group->entity->field_attendance_manager->target_id) {
          return AccessResult::allowed()->cachePerUser();
        }
        break;
    }

    return AccessResult::forbidden()->cachePerUser();
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pbc_groups_menu_links_discovered_alter(&$links) {
  $links['user.page']['title'] = t('Dashboard');
}
